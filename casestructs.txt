import re

def parse_input_file(input_file):
    with open(input_file, 'r') as file:
        lines = file.readlines()

    field_definitions = []
    field_assignments = []

    for index, line in enumerate(lines):
        line = line.strip()
        if not line:
            continue  # Skip empty lines

        match = re.match(r'\s*(\w+)\s+(.+)', line)
        if match:
            field_name = match.group(1)
            field_type = match.group(2)

            field_type, field_size = parse_field_type(field_type)

            field_definitions.append(f"{field_name}\t\t = Column({get_column_type(field_type, field_size)})")
            field_assignments.append(f"parsed_item.{field_name}\t\t = row_tuple[{index}]")
        else:
            print(f"Ignoring invalid line: {line}")

    with open('1.txt', 'w') as output_file:
        output_file.write('\n'.join(field_definitions))

    with open('2.txt', 'w') as output_file:
        output_file.write('\n'.join(field_assignments))


def parse_field_type(field_type):
    field_type = field_type.upper()
    if 'NVARCHAR' in field_type:
        match = re.search(r'\((\d+)\)', field_type)
        field_size = match.group(1) if match else ''
        return 'NVARCHAR', field_size
    elif 'DATE' in field_type or 'TIMESTAMP' in field_type:
        return 'DATE', ''
    elif 'NUMBER' in field_type:
        return 'NUMBER', ''
    else:
        raise ValueError(f"Unsupported field type: {field_type}")


def get_column_type(field_type, field_size):
    if field_type == 'NVARCHAR':
        return f"String({field_size})"
    elif field_type == 'DATE':
        return 'TIMESTAMP'
    elif field_type == 'NUMBER':
        return 'Integer'


input_file = '/home/barbosa/Projects/CppHello/inputstruct.txt'
parse_input_file(input_file)
